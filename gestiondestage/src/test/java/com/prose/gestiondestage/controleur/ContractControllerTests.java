package com.prose.gestiondestage.controleur;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.prose.entity.ResultValue;
import com.prose.entity.users.auth.Role;
import com.prose.presentation.Controller;
import com.prose.security.JwtTokenProvider;
import com.prose.service.*;
import com.prose.service.Exceptions.*;
import com.prose.service.dto.*;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(Controller.class)
@ContextConfiguration
@WebAppConfiguration
public class ContractControllerTests {

    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private EmployeurService employeurService;

    @MockBean
    private ContractService contractService;

    @MockBean
    private StudentService studentService;

    @MockBean
    private TeacherService teacherService;

    @MockBean
    private ProgramManagerService programManagerService;

    @MockBean
    private LoginService loginService;

    @MockBean
    private JwtTokenProvider jwtTokenProvider;
    @MockBean
    private JobOfferService jobOfferService;

    @MockBean
    private CurriculumVitaeService curriculumVitaeService;

    @Autowired
    private WebApplicationContext webApplicationContext;

    @MockBean
    private NotificationService notificationService;
    @MockBean
    private EvaluationEmployerService evaluationEmployerService;

    @MockBean
    private PDFService pdfService;

    @BeforeEach
    void setup() {
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)
                //.apply(SecurityMockMvcConfigurers.springSecurity())
                .build();
    }

    public SignatureBase64DTO getBase64Image() {
        return new SignatureBase64DTO("","password");
    }

    @Test
    void getAwaitingInternshipsProgramManagerTest() throws Exception {
        // Arrange

        SessionDTO sessionDTO = new SessionDTO(5L,"season","year","ljlda","dka;d");
        ProgramManagerDTO programManagerDTO =
                new ProgramManagerDTO(1L,
                        "nom",
                        "prenom",
                        "scsa",
                        "sax",
                        "xsax");
        InternshipOfferDTO internshipOfferDTO = new InternshipOfferDTO(1L,null,null,null,null,null);
        UserDTO userDTO = new UserDTO(programManagerDTO.id(),programManagerDTO.courriel(),"---", Role.PROGRAM_MANAGER);
        when(loginService.getUserByEmail(anyString())).thenReturn(userDTO);
        when(jwtTokenProvider.getJwtUsername(anyString())).thenReturn("test");
        when(jobOfferService.getSessionFromDB(any(),any())).thenReturn(sessionDTO);
        when(programManagerService.getContracts(sessionDTO.id(),5,5)).thenReturn(new PageImpl<>(List.of(internshipOfferDTO,internshipOfferDTO), PageRequest.of(5,5),5));

        // Act
        MvcResult mvcResult = mockMvc.perform(get("/contracts/?"
                                                            + "season=" + sessionDTO.season()
                                                            + "&year=" + sessionDTO.year()
                                                            + "&page=5"
                                                            + "&size=5")
                        .header("Authorization", "test")
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();

        ResultValue<List<InternshipOfferDTO>> result = objectMapper.readValue(mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8), new TypeReference<>() {});
        // Assert
        assertThat(result.getValue().size()).isEqualTo(2);
    }

    @Test
    void getAwaitingInternshipsEmployertTest() throws Exception {
        // Arrange
        SessionDTO sessionDTO = new SessionDTO(5L,"season","year",null,null);
        InternshipOfferDTO internshipOfferDTO = new InternshipOfferDTO(1L,null,null,null,null,null);
        UserDTO userDTO = new UserDTO(5L,"kjaldja","---", Role.EMPLOYEUR);
        when(loginService.getUserByEmail(anyString())).thenReturn(userDTO);
        when(jwtTokenProvider.getJwtUsername(anyString())).thenReturn("test");
        when(jobOfferService.getSessionFromDB(any(),any())).thenReturn(sessionDTO);
        when(employeurService.getContracts(userDTO.id(),sessionDTO.id(),5,5)).thenReturn(new PageImpl<>(List.of(internshipOfferDTO,internshipOfferDTO),PageRequest.of(5,5),5));

        // Act
        MvcResult mvcResult = mockMvc.perform(get("/contracts/?"
                        + "season=" + sessionDTO.season()
                        + "&year=" + sessionDTO.year()
                        + "&page=5"
                        + "&size=5")
                        .header("Authorization", "test")
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();

        ResultValue<List<InternshipOfferDTO>> result = objectMapper.readValue(mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8), new TypeReference<>() {});
        // Assert
        assertThat(result.getValue().size()).isEqualTo(2);
    }

    @Test
    void getAwaitingInternshipsStudentTest() throws Exception {
        // Arrange
        SessionDTO sessionDTO = new SessionDTO(4L, "season","year",null,null);
        InternshipOfferDTO internshipOfferDTO = new InternshipOfferDTO(1L,null,null,null,null,null);
        UserDTO userDTO = new UserDTO(5L,"kjaldja","---", Role.STUDENT);
        when(loginService.getUserByEmail(anyString())).thenReturn(userDTO);
        when(jwtTokenProvider.getJwtUsername(anyString())).thenReturn("test");
        when(jobOfferService.getSessionFromDB(any(),any())).thenReturn(sessionDTO);
        when(studentService.getContracts(userDTO.id(),sessionDTO.id(),5,5)).thenReturn(new PageImpl<>(List.of(internshipOfferDTO,internshipOfferDTO),PageRequest.of(5,5),5));

        // Act
        MvcResult mvcResult = mockMvc.perform(get("/contracts/?"
                        + "season=" + sessionDTO.season()
                        + "&year=" + sessionDTO.year()
                        + "&page=5"
                        + "&size=5")
                        .header("Authorization", "test")
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();

        ResultValue<List<InternshipOfferDTO>> result = objectMapper.readValue(mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8), new TypeReference<>() {});
        // Assert
        assertThat(result.getValue().size()).isEqualTo(2);
    }

    @Test
    void getAwaitingInternshipsTest_unauthorized() throws Exception {
        String token = "Bearer invalidToken";
        SessionDTO sessionDTO = new SessionDTO(5L,"season","year",null,null);

        when(jwtTokenProvider.getJwtUsername(token)).thenReturn(null);

        MvcResult mvcResult = mockMvc.perform(get("/contracts/?"
                        + "season=" + sessionDTO.season()
                        + "&year=" + sessionDTO.year()
                        + "&page=5"
                        + "&size=5")
                        .header("Authorization", token)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isUnauthorized())
                .andReturn();

        ResultValue<List<InternshipOfferDTO>> resultValue = objectMapper.readValue(
                mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8),
                new TypeReference<>() {
                }
        );

        Assertions.assertThat(resultValue.getException()).isEqualTo("JWT");
    }

    @Test
    void getAwaitingInternshipsTest_forbidden() throws Exception {
        String token = "Bearer validToken";
        String jwtUsername = "test@example.com";
        SessionDTO sessionDTO = new SessionDTO(5L,"season","year",null,null);

        when(jwtTokenProvider.getJwtUsername(token)).thenReturn(jwtUsername);

        /*try (MockedStatic<AuthUserUnifier> authUserUnifierMock = Mockito.mockStatic(AuthUserUnifier.class)) {
            authUserUnifierMock.when(() -> AuthUserUnifier.getUserType(jwtUsername)).thenReturn(Role.EMPLOYEUR);*/
        UserDTO userDTO = new UserDTO(1L, jwtUsername, "password", Role.TEACHER);
        when(loginService.getUserByEmail(any())).thenReturn(userDTO);

        MvcResult mvcResult = mockMvc.perform(get("/contracts/?"
                        + "season=" + sessionDTO.season()
                        + "&year=" + sessionDTO.year()
                        + "&page=5"
                        + "&size=5")
                        .header("Authorization", token)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isForbidden())
                .andReturn();

        ResultValue<List<InternshipOfferDTO>> resultValue = objectMapper.readValue(
                mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8),
                new TypeReference<>() {
                }
        );

        Assertions.assertThat(resultValue.getException()).isEqualTo("Unauthorized");
    }

    @Test
    void signTest() throws Exception {
        // Arrange
        ProgramManagerDTO programManagerDTO =
                new ProgramManagerDTO(1L,
                        "nom",
                        "prenom",
                        "scsa",
                        "sax",
                        "xsax");
        InternshipOfferDTO internshipOfferDTO = new InternshipOfferDTO(1L,null,null,null,null,null);
        UserDTO userDTO = new UserDTO(programManagerDTO.id(),programManagerDTO.courriel(),"---", Role.PROGRAM_MANAGER);
        when(loginService.getUserByEmailValidatePassword(anyString(),anyString())).thenReturn(userDTO);
        when(jwtTokenProvider.getJwtUsername(anyString())).thenReturn("test");

        LocalDateTime localDateTime = LocalDateTime.now();
        when(contractService.sign(eq(userDTO),eq(1L),any())).thenReturn(localDateTime);

        // Act
        MvcResult mvcResult = mockMvc.perform(post("/contracts/sign/1")
                        .header("Authorization", "test")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(getBase64Image()))
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();
        ResultValue<String> result = objectMapper.readValue(mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8), new TypeReference<>() {});
        // Assert
        assertThat(result.getValue()).isEqualTo(localDateTime.toString());
    }

    @Test
    void signTest_unauthorized() throws Exception {
        String token = "Bearer invalidToken";

        when(jwtTokenProvider.getJwtUsername(token)).thenReturn(null);

        MvcResult mvcResult = mockMvc.perform(post("/contracts/sign/1")
                        .header("Authorization", token)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(getBase64Image()))
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isUnauthorized())
                .andReturn();

        ResultValue<List<InternshipOfferDTO>> resultValue = objectMapper.readValue(
                mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8),
                new TypeReference<>() {
                }
        );

        Assertions.assertThat(resultValue.getException()).isEqualTo("JWT");
    }

    @Test
    void signTest_forbidden() throws Exception {
        String token = "Bearer validToken";
        String jwtUsername = "test@example.com";

        when(jwtTokenProvider.getJwtUsername(token)).thenReturn(jwtUsername);

        /*try (MockedStatic<AuthUserUnifier> authUserUnifierMock = Mockito.mockStatic(AuthUserUnifier.class)) {
            authUserUnifierMock.when(() -> AuthUserUnifier.getUserType(jwtUsername)).thenReturn(Role.EMPLOYEUR);*/
        UserDTO userDTO = new UserDTO(1L, jwtUsername, "password", Role.TEACHER);
        when(loginService.getUserByEmailValidatePassword(anyString(),anyString())).thenReturn(userDTO);

        MvcResult mvcResult = mockMvc.perform(post("/contracts/sign/1")
                        .header("Authorization", token)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(getBase64Image()))
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isForbidden())
                .andReturn();

        ResultValue<List<InternshipOfferDTO>> resultValue = objectMapper.readValue(
                mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8),
                new TypeReference<>() {
                }
        );

        Assertions.assertThat(resultValue.getException()).isEqualTo("Unauthorized");
    }

    @Test
    void signTest_password() throws Exception {
        String token = "Bearer validToken";
        String jwtUsername = "test@example.com";

        when(jwtTokenProvider.getJwtUsername(token)).thenReturn(jwtUsername);

        /*try (MockedStatic<AuthUserUnifier> authUserUnifierMock = Mockito.mockStatic(AuthUserUnifier.class)) {
            authUserUnifierMock.when(() -> AuthUserUnifier.getUserType(jwtUsername)).thenReturn(Role.EMPLOYEUR);*/
        UserDTO userDTO = new UserDTO(1L, jwtUsername, "password", Role.EMPLOYEUR);
        when(loginService.getUserByEmailValidatePassword(anyString(),anyString())).thenThrow(InvalidPasswordException.class);

        MvcResult mvcResult = mockMvc.perform(post("/contracts/sign/1")
                        .header("Authorization", token)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(getBase64Image()))
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isUnauthorized())
                .andReturn();

        ResultValue<List<InternshipOfferDTO>> resultValue = objectMapper.readValue(
                mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8),
                new TypeReference<>() {
                }
        );

        Assertions.assertThat(resultValue.getException()).isEqualTo("Password");
    }

    @Test
    void signTest_notFound() throws Exception {
        // Arrange
        ProgramManagerDTO programManagerDTO =
                new ProgramManagerDTO(1L,
                        "nom",
                        "prenom",
                        "scsa",
                        "sax",
                        "xsax");
        InternshipOfferDTO internshipOfferDTO = new InternshipOfferDTO(1L,null,null,null,null,null);
        UserDTO userDTO = new UserDTO(programManagerDTO.id(),programManagerDTO.courriel(),"---", Role.PROGRAM_MANAGER);
        when(loginService.getUserByEmailValidatePassword(anyString(),anyString())).thenReturn(userDTO);
        when(jwtTokenProvider.getJwtUsername(anyString())).thenReturn("test");
        doThrow(InternshipNotFoundException.class).when(contractService).sign(any(),anyLong(),any());

        // Act
        MvcResult mvcResult = mockMvc.perform(post("/contracts/sign/1")
                        .header("Authorization", "test")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(getBase64Image()))
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound())
                .andReturn();

        ResultValue<String> resultValue = objectMapper.readValue(mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8), new TypeReference<>() {});
        // Assert
        Assertions.assertThat(resultValue.getException()).isEqualTo("NotFound");
    }

    @Test
    void signTest_MissingPermissions() throws Exception {
        // Arrange
        ProgramManagerDTO programManagerDTO =
                new ProgramManagerDTO(1L,
                        "nom",
                        "prenom",
                        "scsa",
                        "sax",
                        "xsax");
        InternshipOfferDTO internshipOfferDTO = new InternshipOfferDTO(1L,null,null,null,null,null);
        UserDTO userDTO = new UserDTO(programManagerDTO.id(),programManagerDTO.courriel(),"---", Role.PROGRAM_MANAGER);
        when(loginService.getUserByEmailValidatePassword(anyString(),anyString())).thenReturn(userDTO);
        when(jwtTokenProvider.getJwtUsername(anyString())).thenReturn("test");
        doThrow(MissingPermissionsExceptions.class).when(contractService).sign(any(),anyLong(),any());

        // Act
        MvcResult mvcResult = mockMvc.perform(post("/contracts/sign/1")
                        .header("Authorization", "test")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(getBase64Image()))
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest())
                .andReturn();

        ResultValue<String> resultValue = objectMapper.readValue(mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8), new TypeReference<>() {});
        // Assert
        Assertions.assertThat(resultValue.getException()).isEqualTo("MissingPermissions");
    }

    @Test
    void signTest_BadFormat() throws Exception {
        // Arrange
        ProgramManagerDTO programManagerDTO =
                new ProgramManagerDTO(1L,
                        "nom",
                        "prenom",
                        "scsa",
                        "sax",
                        "xsax");
        InternshipOfferDTO internshipOfferDTO = new InternshipOfferDTO(1L,null,null,null,null,null);
        UserDTO userDTO = new UserDTO(programManagerDTO.id(),programManagerDTO.courriel(),"---", Role.PROGRAM_MANAGER);
        when(loginService.getUserByEmailValidatePassword(anyString(),anyString())).thenReturn(userDTO);
        when(jwtTokenProvider.getJwtUsername(anyString())).thenReturn("test");
        doThrow(InvalidBase64Exception.class).when(contractService).sign(any(),anyLong(),any());

        // Act
        MvcResult mvcResult = mockMvc.perform(post("/contracts/sign/1")
                        .header("Authorization", "test")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(getBase64Image()))
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest())
                .andReturn();

        ResultValue<String> resultValue = objectMapper.readValue(mvcResult.getResponse().getContentAsString(StandardCharsets.UTF_8), new TypeReference<>() {});
        // Assert
        Assertions.assertThat(resultValue.getException()).isEqualTo("SignFormat");
    }
}
